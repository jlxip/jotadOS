#!/bin/bash

# Check whether the 'obj' directory exists.
if [ ! -d obj ]; then
	mkdir obj
fi
if [ ! -d iso ]; then
	mkdir -p iso/boot
fi

export EXTRA="$1"

_compileGCC () {
	toRun="i686-elf-gcc -c -I./src
		-std=gnu99 -ffreestanding -O3 -Wall -Wextra -Werror $EXTRA
		$0 -o obj/$(basename $0 .c).o"

	$($toRun)
	if [ $? != 0 ]; then
		echo
		echo -e "\e[32m$toRun\e[0m"
		echo -e "\e[1;31mBUILD FAILED!\e[0m"
		return 1
	fi
}
export -f _compileGCC

_compileASM () {
	toRun="nasm $0 -o obj/$(basename $0 .asm).o -f elf32"
	$($toRun)
	if [ $? != 0 ]; then
		echo
		echo -e "\e[32m$toRun\e[0m"
		echo -e "\e[1;31mBUILD FAILED!\e[0m"
		return 1
	fi
}
export -f _compileASM

# Welcome!
echo -e "\e[1;36mCompiling jotadOS...\e[0m"

# Kernel (C)
find src/kernel -type f -iname *.c | xargs -n1 bash -c '_compileGCC $1 || exit 255' || exit
echo -e "\e[1;33mKernel C files done.\e[0m"

# Kernel (asm)
find src/kernel -type f -iname *.asm | xargs -n1 bash -c '_compileASM $1 || exit 255' || exit
find src/ -iname boot.asm | xargs -n1 bash -c '_compileASM $1 || exit 255' || exit
echo -e "\e[1;33mKernel asm files done.\e[0m"

# Klibc
find src/klibc -type f -iname *.c | xargs -n1 bash -c '_compileGCC $1 || exit 255'
echo -e "\e[1;33mKernel's libc done.\e[0m"

# The whole kernel
i686-elf-gcc -T linker.ld -I./src -std=gnu99 -ffreestanding -O2 -nostdlib obj/*.o -o iso/boot/kernel.bin
echo -e "\e[1;33mKernel linking done.\e[0m"

# JBoot
nasm src/JBoot/CD/JBoot.asm -f bin -o iso/boot/CD.bin || exit 255

src/JBoot/nasmPP.py src/JBoot/HDD/stage1.asm || exit 255
src/JBoot/nasmPP.py src/JBoot/HDD/stage2.asm || exit 255
nasm src/JBoot/HDD/stage1.asm.npp -f bin -o iso/boot/HDDs1.bin || exit 255
nasm src/JBoot/HDD/stage2.asm.npp -f bin -o iso/boot/HDDs2.bin || exit 255
rm -rf src/JBoot/HDD/*.asm.npp
echo -e "\e[1;33mJBoot compiled.\e[0m"




echo -e "\e[1;36mCompiling extras...\e[0m"

# MSS
nasm src/extra/MSS/MSS.asm -f bin -o iso/MSS.bin || exit 255
echo -e "\e[1;33mMSS compiled.\e[0m"

# Create ISO
genisoimage -no-emul-boot -b boot/CD.bin -o jotadOS.iso iso
echo -e "\e[1;33mIso file created.\e[0m"

echo -e "\e[1;36mCompilation successful!\e[0m"
echo
